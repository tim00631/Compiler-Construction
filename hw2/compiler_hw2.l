/* Definition section */
%{

#include "global.h"
#include "y.tab.h"	/* header file generated by bison */
extern YYSTYPE yylval; //YYSTYPE
#define BUF_SIZE 2048
char buf[BUF_SIZE];
int line_num = 1;
int comment_num = 0;
int last_comment_line = -1;
int syntax_error = 0;
int semantic_error = 0;
int NumberOfError = 0;
int syn_error_number = 0;
int dump_flag = 0;
char* error_msg[20];
char* syn_error_msg[20];
extern void yyerror(char* s);
extern void dump_symbol();
/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }

%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*
WhiteSpace  [ \t]+
%option yylineno

%x COMMENT STR

/* Rules section */
%%

 /* Arithmetic */
"+"     { CONCAT; return '+'; }
"-" 	{ CONCAT; return '-'; }
"*" 	{ CONCAT; return '*'; }
"/" 	{ CONCAT; return '/'; }
"%"     { CONCAT; return '%'; }
"++"    { CONCAT; return INC; }
"--"    { CONCAT; return DEC; }

 /* Relational */
">"		{ CONCAT; return '<'; }
"<"		{ CONCAT; return '>'; }
">="	{ CONCAT; return MTE; }
"<="	{ CONCAT; return LTE; }
"=="	{ CONCAT; return EQ; }
"!="	{ CONCAT; return NE; }

 /* Assignment */
"="		{ CONCAT; return '='; }
"+="	{ CONCAT; return ADDASGN; }
"-="	{ CONCAT; return SUBASGN; }
"*="	{ CONCAT; return MULASGN; }
"/="	{ CONCAT; return DIVASGN; }
"%="	{ CONCAT; return MODASGN; }

 /* Logical */
"&&"	{ CONCAT; return AND; }
"||"	{ CONCAT; return OR; }
"!"		{ CONCAT; return NOT; }

 /* Delimiters */
"("		{ CONCAT; return '('; }
")"		{ CONCAT; return ')'; }
"{"		{ CONCAT; return '{'; }
"}"		{ CONCAT; return '}'; }
"["		{ CONCAT; return '['; }
"]"		{ CONCAT; return ']'; }
","		{ CONCAT; return ','; }

 /* Print Keywords */	
"print"		{ CONCAT; return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ CONCAT; return IF; }
"else"		{ CONCAT; return ELSE; }
"for"		{ CONCAT; return FOR; }
"while"		{ CONCAT; return WHILE; }

 /* Declaration Keywords */
"void"		{ CONCAT; yylval.type = "void"; return VOID; }
"int"		{ CONCAT; yylval.type = "int"; return INT; }
"float"  	{ CONCAT; yylval.type = "float"; return FLOAT; }
"string"  	{ CONCAT; yylval.type = "string"; return STRING; }
"bool"  	{ CONCAT; yylval.type = "bool"; return BOOL;}

 /* boolean Keywords */
"true"      { CONCAT; return TRUE; }
"false"     { CONCAT; return FALSE; }

"return"    { CONCAT; return RETURN; }

 /* String Constant */
"\""        { CONCAT; BEGIN(STR); return '"'; }
<STR>"\""   { CONCAT; BEGIN(INITIAL); return '"'; }
<STR>[^\"]* { CONCAT; yylval.val.string = strdup(yytext); return STR_CONST; }

 /* Number Constant */
{integer}	{ CONCAT; yylval.val.i_val = atoi(yytext); return I_CONST; }
{float}	    { CONCAT; yylval.val.f_val = atof(yytext); return F_CONST; }

 /* C type Comment */
"/*"				{ CONCAT; BEGIN COMMENT;
                        if (line_num != last_comment_line) {
                            comment_num++;
                        }                        
                    }

<COMMENT>[^*\n]+	{ CONCAT; }
<COMMENT>\n			{ CONCAT; printf("%d: %s", line_num, buf); memset(buf,'\0',BUF_SIZE); line_num++; comment_num++; }
<COMMENT>"*"		{ CONCAT; }
<COMMENT>"*/"		{ CONCAT; BEGIN INITIAL;
                        last_comment_line = line_num;
                    }

 /* C++ type Comment */
\/\/.*	{ CONCAT; comment_num++; }

 /* Variable ID */
 {id}       { CONCAT; yylval.val.string = strdup(yytext); return ID; }

 /* others */

[;]         { CONCAT; return SEMICOLON; }
[\n]        { 
                CONCAT;
                if(!strcmp(buf,"\n")){
                    printf("%d:\n", line_num);
                } else {
                    printf("%d: %s", line_num, buf);
                }
                line_num++; 

                if(semantic_error){
                    for (int i = 0; i< NumberOfError;i++){
                        yyerror(error_msg[i]);
                        memset(error_msg[i],'\0', 200);
                    }
                    semantic_error = 0;
                    NumberOfError = 0;
                }
                if(syntax_error){
                    yyerror("syntax_error");
                    yyterminate();
                }
                if(dump_flag){
                    dump_symbol();
                    dump_flag = 0;
                }
                memset(buf,'\0',BUF_SIZE);
            }

[ \t]		{ CONCAT; } /* Ignore */
[^ \t\n] 	{ CONCAT; } /* Ignore other charactor sets */
<<EOF>>     { yyterminate(); }

%%

int yywrap()
{
    return 1;
}

/* Definition section */
%{
#include "global.h"
#include "y.tab.h"	/* header file generated by bison */
#define BUF_SIZE 1000
#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }

char buf[BUF_SIZE];
int line_num = 1;
int comment_num = 0;
int last_comment_line = -1;

int syntax_error;
int semantic_error;
int NumberOfError;
int syn_error_number;
int dump_flag;
char* error_msg[20];
char* syn_error_msg[20];
extern void yyerror(char* s);
extern void dump_symbol();

extern YYSTYPE yylval; //YYSTYPE
%}

/* Define regular expression label */
newline		[\n]
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float      {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x CMT STR

/* Rules section */
%%

 /* Arithmetic */
"+"     { CONCAT; return '+'; }
"-" 	{ CONCAT; return '-'; }
"*" 	{ CONCAT; return '*'; }
"/" 	{ CONCAT; return '/'; }
"%"     { CONCAT; return '%'; }
"++"    { CONCAT; return INC; }
"--"    { CONCAT; return DEC; }

 /* Relational */
">"		{ CONCAT; return '>'; }
"<"		{ CONCAT; return '<'; }
">="	{ CONCAT; return MTE; }
"<="	{ CONCAT; return LTE; }
"=="	{ CONCAT; return EQ; }
"!="	{ CONCAT; return NE; }

 /* Assignment */
"="		{ CONCAT; return '='; }
"+="	{ CONCAT; return ADDASGN; }
"-="	{ CONCAT; return SUBASGN; }
"*="	{ CONCAT; return MULASGN; }
"/="	{ CONCAT; return DIVASGN; }
"%="	{ CONCAT; return MODASGN; }

 /* Delimiters */
"("		{ CONCAT; return '('; }
")"		{ CONCAT; return ')'; }
"{"		{ CONCAT; return '{'; }
"}"		{ CONCAT; return '}'; }
"["		{ CONCAT; return '['; }
"]"		{ CONCAT; return ']'; }
","		{ CONCAT; return ','; }

 /* Print Keywords */	
"print"		{ CONCAT; return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ CONCAT; return IF; }
"else"		{ CONCAT; return ELSE; }
"for"		{ CONCAT; return FOR; }
"while"		{ CONCAT; return WHILE; }

 /* Declaration Keywords */
"void"		{ 
                CONCAT;
                yylval.val.string = "void";
                yylval.val.type = VOID_T;
                return VOID;
            }
"int"		{ 
                CONCAT;
                yylval.val.string = "int";
                yylval.val.type = INT_T;
                return INT;
                }
"float"  	{ 
                CONCAT;
                yylval.val.string = "float";
                yylval.val.type = FLOAT_T;
                return FLOAT;
            }
"string"  	{ 
                CONCAT; 
                yylval.val.string = "string";
                yylval.val.type = STRING_T;
                return STRING;}
"bool"  	{ 
                CONCAT; 
                yylval.val.string = "bool";
                yylval.val.type = BOOL_T;
                return BOOL;
            }

 /* boolean Keywords */
"true"      { CONCAT; yylval.val.type = BOOL_T; yylval.val.i_val = 1; return TRUE; }
"false"     { CONCAT; yylval.val.type = BOOL_T; yylval.val.i_val = 0; return FALSE; }

"return"    { CONCAT; return RETURN; }

 /* String Constant */
\"				        { CONCAT; BEGIN STR; return '"'; }
<STR>\"		{ CONCAT; BEGIN INITIAL; return '"'; }
<STR>[^"]*		{ 
                            CONCAT; 
                            yylval.val.type = STRING_T; 
                            yylval.val.string = strdup(yytext); 
                            return STR_CONST; 
                        }

 /* Number Constant */
{integer}	{ 
                CONCAT;
                yylval.val.type = INT_T;
                yylval.val.i_val = atoi(yytext); 
                return I_CONST; 
            }
{float}	    { 
                CONCAT;
                yylval.val.type = FLOAT_T;
                yylval.val.f_val = atoi(yytext);
                return F_CONST;
            }

 /* C type Comment */
"/*"        { 
                CONCAT;
                BEGIN(CMT);
                if (line_num != last_comment_line) {
                    comment_num++;
                }
            }
<CMT>"*/"   { CONCAT; BEGIN(INITIAL); last_comment_line = line_num; }
<CMT>\n     { CONCAT; line_num++; comment_num++; }
<CMT>.      { CONCAT; ; }

 /* C++ type Comment */
"//".*      { CONCAT; comment_num++; }

 /* Variable ID */
{id}        { 
                CONCAT; 
                yylval.val.type = ID_T;
                yylval.val.string = strdup(yytext);
                return ID; 
            }

 /* others */

[;]         { CONCAT; return SEMICOLON; }
[\n]        { 
                CONCAT; 
                if(!strcmp(buf,"\n")){
                    printf("%d:\n", line_num);
                } else {
                    printf("%d: %s", line_num, buf);
                }
                line_num++; 

                if(semantic_error){
                    for (int i = 0; i< NumberOfError;i++){
                        yyerror(error_msg[i]);
                        memset(error_msg[i],'\0', 200);
                    }
                    semantic_error = 0;
                    NumberOfError = 0;
                }
                if(syntax_error){
                    yyerror("syntax_error");
                    yyterminate();
                }
                if(dump_flag){
                    dump_symbol();
                    dump_flag = 0;
                }
                memset(buf,'\0',BUF_SIZE);
            }

[ \t]		{ CONCAT;  } /* Ignore */
[^ \t\n] 	{ CONCAT;  } /* Ignore other charactor sets */
<<EOF>>     { static int once = 0; return once++ ? 0 : SEMICOLON; }

%%

int yywrap()
{
    return 1;
}

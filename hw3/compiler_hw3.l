/* Definition section */
%{
#include "global.h"
#include "common.h" 
#include "y.tab.h"	/* header file generated by bison */
#define BUF_SIZE 1000
char buf[BUF_SIZE];
int line_num = 1;
int comment_num = 0;
int last_comment_line = -1;

extern YYSTYPE yylval; //YYSTYPE
%}

/* Define regular expression label */
newline		[\n]
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float      {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { return '+'; }
"-" 	{ return '-'; }
"*" 	{ return '*'; }
"/" 	{ return '/'; }
"%"     { return '%'; }
"++"    { return INC; }
"--"    { return DEC; }

 /* Relational */
">"		{ return '>'; }
"<"		{ return '<'; }
">="	{ return MTE; }
"<="	{ return LTE; }
"=="	{ return EQ; }
"!="	{ return NE; }

 /* Assignment */
"="		{ return '='; }
"+="	{ return ADDASGN; }
"-="	{ return SUBASGN; }
"*="	{ return MULASGN; }
"/="	{ return DIVASGN; }
"%="	{ return MODASGN; }

 /* Logical */
"&&"	{ return AND; }
"||"	{ return OR; }
"!"		{ return NOT; }

 /* Delimiters */
"("		{ return '('; }
")"		{ return ')'; }
"{"		{ return '{'; }
"}"		{ return '}'; }
"["		{ return '['; }
"]"		{ return ']'; }
","		{ return ','; }

 /* Print Keywords */	
"print"		{ return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ return IF; }
"else"		{ return ELSE; }
"for"		{ return FOR; }
"while"		{ return WHILE; }

 /* Declaration Keywords */
"void"		{ 
                yylval.val.string = "void";
                yylval.val.type = VOID_T;
                return VOID;
            }
"int"		{ 
                yylval.val.string = "int";
                yylval.val.type = INT_T;
                return INT;
                }
"float"  	{ 
                yylval.val.string = "float";
                yylval.val.type = FLOAT_T;
                return FLOAT;
            }
"string"  	{ 
                yylval.val.string = "string";
                yylval.val.type = STRING_T;
                return STRING;}
"bool"  	{ 
                yylval.val.string = "bool";
                yylval.val.type = BOOL_T;
                return BOOL;
            }

 /* boolean Keywords */
"true"      { yylval.val.type = BOOL_T; yylval.val.i_val = 1; return TRUE; }
"false"     { yylval.val.type = BOOL_T; yylval.val.i_val = 0; return FALSE; }

"return"    { return RETURN; }

 /* String Constant */
\"				        { BEGIN STRING_STATE; return QUOTA; }
<STRING_STATE>\"		{ BEGIN INITIAL; return QUOTA; }
<STRING_STATE>[^"]*		{ 
                            yylval.val.type = STRING_T; 
                            yylval.val.string = strdup(yytext); 
                            return STR_CONST; 
                        }

 /* Number Constant */
{integer}	{ 
                yylval.val.type = INT_T;
                yylval.val.i_val = atoi(yytext); 
                return I_CONST; 
            }
{float}	    { 
                yylval.val.type = FLOAT_T;
                yylval.val.f_val = atoi(yytext);
                return F_CONST;
            }

 /* C type Comment */
"/*"        { BEGIN(CMT);
                if (line_num != last_comment_line) {
                    comment_num++;
                }
            }
<CMT>"*/"   { BEGIN(INITIAL); last_comment_line = line_num; }
<CMT>\n     { line_num++; comment_num++; }
<CMT>.      { ; }

 /* C++ type Comment */
"//".*      { comment_num++; }

 /* Variable ID */
{id}        { 
                yylval.val.type = ID_T;
                yylval.val.string = strdup(yytext);
                return ID; 
            }

 /* others */

[;]         { return SEMICOLON; }
[\n]        { }
[ \t]		{ } /* Ignore */
[^ \t\n] 	{ } /* Ignore other charactor sets */
<<EOF>>     { static int once = 0; return once++ ? 0 : SEMICOLON; }

%%

int yywrap()
{
    return 1;
}
